---

- name: ensure old versions of docker are not installed.
  package:
    name:
      - docker
      - docker-common
      - docker-engine
    state: absent

- name: install cronie
  package:
    name: cronie
    state: latest

- name: add docker gpg key
  rpm_key:
    key: https://download.docker.com/linux/centos/gpg
    state: present

- name: add docker repository.
  get_url:
    url: "{{ docker_yum_repo_url }}"
    dest: '/etc/yum.repos.d/docker-{{ docker_edition }}.repo'
    owner: root
    group: root
    mode: 0644

# - name: Configure Docker Edge repo.
#   ini_file:
#     dest: '/etc/yum.repos.d/docker-{{ docker_edition }}.repo'
#     section: 'docker-{{ docker_edition }}-edge'
#     option: enabled
#     value: '{{ docker_yum_repo_enable_edge }}'
#     mode: 0644
#
# - name: Configure Docker Test repo.
#   ini_file:
#     dest: '/etc/yum.repos.d/docker-{{ docker_edition }}.repo'
#     section: 'docker-{{ docker_edition }}-test'
#     option: enabled
#     value: '{{ docker_yum_repo_enable_test }}'
#     mode: 0644

# - name: Install containerd separately (CentOS 8).
#   package:
#     name: https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm
#     state: present

- name: create directory for systemd drop-ins
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
    mode: 0755

- name: systemd drop-in for options
  template:
    src:  "{{ item.src }}"
    dest: "/etc/systemd/system/docker.service.d/{{ item.dest }}"
    mode: 0644
  loop:
    - { src: 'docker-service-general-options.conf.j2', dest: '010-general-options.conf' }
    - { src: 'docker-service-storage-options.conf.j2', dest: '020-storage-options.conf' }
    - { src: 'docker-service-network-options.conf.j2', dest: '030-network-options.conf' }
    - { src: 'docker-service-dns-options.conf.j2', dest: '040-dns-options.conf' }
    - { src: 'docker-service-iptables-fix.conf.j2', dest: '090-iptables-fix.conf' }
    - { src: 'docker-service-exec-start.conf.j2', dest: '090-exec-start.conf' }

- name: install docker
  package:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - 'docker-{{ docker_edition }}'
      - 'docker-{{ docker_edition }}-cli'
      - containerd.io

- name: alow containers to manage cgroup
  ansible.posix.seboolean:
    name: container_manage_cgroup
    state: true
    persistent: true
  when: docker_selinux_enabled | bool and docker_selinux_container_cgroup | bool

- name: ensure docker config dir exists
  file:
    path: /root/.docker
    state: directory
    mode: 0755

- include_tasks: storage-setup.yml
  when: (storage_setup_physical_device is defined) and (storage_setup_physical_device | length > 0) and (docker_storage_driver == "overlay2")

- name: create the docker ferm configuration
  template: src=templates/ferm-docker.conf.j2 dest=/etc/ferm/ferm.d/2000-docker.conf owner=root group=root mode=0600
  tags:
  - ferm-conf

- name: create the docker dns ferm configuration
  template: src=templates/ferm-docker-dns.conf.j2 dest=/etc/ferm/ferm.d/2000-docker-dns.conf owner=root group=root mode=0600
  tags:
  - ferm-conf

- name: create the docker ferm variables
  template: src=templates/ferm-docker-variables.conf.j2 dest=/etc/ferm/vars.d/2000-docker.conf owner=root group=root mode=0600
  tags:
  - ferm-conf

- name: enable docker
  service:
    name: docker
    enabled: yes

- name: create docker-system-prune cron job
  cron:
    name: "docker-system-prune"
    minute: "0"
    hour: "*/8"
    job: "docker system prune -af > /dev/null 2>&1"
    user: "root"
    cron_file: "docker-system-prune"

- name: docker kresd configuration
  template:
    src: "{{ item.src }}"
    dest: "/etc/knot-resolver/kresd.conf.d/{{ item.dest }}"
    owner: root
    group: knot-resolver
    mode: 0640
  loop:
    - { src: 'kresd-docker-network.conf.j2', dest: '410-network-docker.conf' }
    - { src: 'kresd-docker-view.conf.j2', dest: '910-view-docker.conf' }
  tags:
  - kresd-conf
